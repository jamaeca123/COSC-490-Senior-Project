from pgpy import PGPKey, PGPUID, PGPMessage
from pgpy.constants import PubKeyAlgorithm, KeyFlags, CompressionAlgorithm, SymmetricKeyAlgorithm
from pgpy.errors import PGPError


def generate_key_pair():
    try:
        # Generate a new RSA key pair
        key = PGPKey.new(PubKeyAlgorithm.RSAEncryptOrSign, 2048)

        # Set preferred algorithms
        key.protection = {
            'symmetric': [SymmetricKeyAlgorithm.AES256],
            'compression': [CompressionAlgorithm.ZLIB]
        }

        # Add a User ID to the key
        uid = PGPUID.new("User", email='user@example.com')
        key.add_uid(uid, usage={KeyFlags.Sign, KeyFlags.EncryptCommunications, KeyFlags.EncryptStorage})

        return key, key.pubkey
    except PGPError as e:
        print("Error:", e)
        return None, None


def encrypt_message(public_key, message):
    try:
        # Load the recipient's public key
        recipient_key = public_key

        # Ensure the message is of type pgpy.PGPMessage
        if not isinstance(message, PGPMessage):
            message = PGPMessage.new(message)

        # Encrypt the message
        encrypted_message = recipient_key.encrypt(message)

        return encrypted_message
    except PGPError as e:
        print("Error:", e)
        return None

def decrypt_message(private_key, encrypted_message):
    try:
        # Decrypt the message
        decrypted_message = private_key.decrypt(encrypted_message)

        return decrypted_message.message
    except PGPError as e:
        print("Error:", e)
        return None

# Generate key pair
private_key, public_key = generate_key_pair()
print("Public Key:", public_key)

# Encrypt a message
user_message = input("Please enter the message you want to encrypt: ")
encrypted_message = encrypt_message(public_key, user_message.encode('utf-8'))
print("Encrypted Message:", encrypted_message)

# Decrypt the message
decrypted_message = decrypt_message(private_key, encrypted_message)
print("Decrypted Message:", decrypted_message)
